/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace SmartHealth {
  export type PatientSummaryStruct = {
    name: PromiseOrValue<BytesLike>;
    age: PromiseOrValue<BytesLike>;
    birthSex: PromiseOrValue<BytesLike>;
    weight: PromiseOrValue<BytesLike>;
  };

  export type PatientSummaryStructOutput = [string, string, string, string] & {
    name: string;
    age: string;
    birthSex: string;
    weight: string;
  };

  export type PatientVitalsStruct = {
    heartRate: PromiseOrValue<BytesLike>;
    bloodPressure: PromiseOrValue<BytesLike>;
    oxygenSat: PromiseOrValue<BytesLike>;
    temperature: PromiseOrValue<BytesLike>;
  };

  export type PatientVitalsStructOutput = [string, string, string, string] & {
    heartRate: string;
    bloodPressure: string;
    oxygenSat: string;
    temperature: string;
  };
}

export interface SmartHealthInterface extends utils.Interface {
  functions: {
    "authorizeProvider(bytes32[])": FunctionFragment;
    "getPatientSummary()": FunctionFragment;
    "getPatientSummaryHCP(bytes32[])": FunctionFragment;
    "getPatientVitals()": FunctionFragment;
    "getPatientVitalsHCP(bytes32[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorizeProvider"
      | "getPatientSummary"
      | "getPatientSummaryHCP"
      | "getPatientVitals"
      | "getPatientVitalsHCP"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorizeProvider",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientSummary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientSummaryHCP",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientVitals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientVitalsHCP",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientSummaryHCP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientVitals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientVitalsHCP",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SmartHealth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SmartHealthInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorizeProvider(
      providerInfo: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPatientSummary(
      overrides?: CallOverrides
    ): Promise<[SmartHealth.PatientSummaryStructOutput]>;

    getPatientSummaryHCP(
      requestorInfo: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[SmartHealth.PatientSummaryStructOutput]>;

    getPatientVitals(
      overrides?: CallOverrides
    ): Promise<[SmartHealth.PatientVitalsStructOutput]>;

    getPatientVitalsHCP(
      requestorInfo: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[SmartHealth.PatientVitalsStructOutput]>;
  };

  authorizeProvider(
    providerInfo: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPatientSummary(
    overrides?: CallOverrides
  ): Promise<SmartHealth.PatientSummaryStructOutput>;

  getPatientSummaryHCP(
    requestorInfo: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<SmartHealth.PatientSummaryStructOutput>;

  getPatientVitals(
    overrides?: CallOverrides
  ): Promise<SmartHealth.PatientVitalsStructOutput>;

  getPatientVitalsHCP(
    requestorInfo: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<SmartHealth.PatientVitalsStructOutput>;

  callStatic: {
    authorizeProvider(
      providerInfo: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getPatientSummary(
      overrides?: CallOverrides
    ): Promise<SmartHealth.PatientSummaryStructOutput>;

    getPatientSummaryHCP(
      requestorInfo: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<SmartHealth.PatientSummaryStructOutput>;

    getPatientVitals(
      overrides?: CallOverrides
    ): Promise<SmartHealth.PatientVitalsStructOutput>;

    getPatientVitalsHCP(
      requestorInfo: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<SmartHealth.PatientVitalsStructOutput>;
  };

  filters: {};

  estimateGas: {
    authorizeProvider(
      providerInfo: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPatientSummary(overrides?: CallOverrides): Promise<BigNumber>;

    getPatientSummaryHCP(
      requestorInfo: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPatientVitals(overrides?: CallOverrides): Promise<BigNumber>;

    getPatientVitalsHCP(
      requestorInfo: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizeProvider(
      providerInfo: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPatientSummary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPatientSummaryHCP(
      requestorInfo: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPatientVitals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPatientVitalsHCP(
      requestorInfo: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
